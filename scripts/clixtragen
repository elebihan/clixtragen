#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# clixtragen - generates helpers for a command line interpreter
#
# Copyright (C) 2013 Eric Le Bihan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

import sys
import argparse
import logging
from gettext import gettext as _
from clixtragen import __version__
from clixtragen.utils import setup_i18n
from clixtragen.parsers.factory import ParserFactory
from clixtragen.generators.factory import GeneratorFactory

logging.basicConfig()

setup_i18n()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--version',
                        action='version',
                        version=__version__)
    parser.add_argument('execname',
                        help=_('name of the executable'))
    parser.add_argument('filename',
                        help=_('source file to parse'))
    parser.add_argument('-o', '--output',
                        metavar='FILE',
                        help=_('set output filename'))
    parser.add_argument('-f', '--from',
                        default='python',
                        dest='input_lang',
                        metavar=_('LANGUAGE'),
                        help=_('set input language'))
    parser.add_argument('-t', '--to',
                        default='yaml',
                        dest='output_format',
                        metavar=_('FORMAT'),
                        help=_('set output format'))
    parser.add_argument('-g', '--list-generators',
                        action='store_true',
                        default=False,
                        help=_('print list of available generators and exit'))
    parser.add_argument('-p', '--list-parsers',
                        action='store_true',
                        default=False,
                        help=_('print list of available parsers and exit'))

    args = parser.parse_args()

    pfactory = ParserFactory()
    gfactory = GeneratorFactory()

    if args.list_parsers:
        for name in pfactory.names:
            print(name)
        sys.exit(0)

    if args.list_generators:
        for name in gfactory.names:
            print(name)
        sys.exit(0)

    parser = pfactory.create_parser(args.input_lang)

    invocation = parser.parse_file(args.filename)
    invocation.name = args.execname

    generator = gfactory.create_generator(args.output_format)
    text = generator.generate(invocation)

    if args.output:
        with open(args.output, 'w') as f:
            f.write(text)
    else:
        print(text, end='')

# vim: ts=4 sts=4 sw=4 et ai
